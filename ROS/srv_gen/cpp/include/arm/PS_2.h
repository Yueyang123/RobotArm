/* Auto-generated by genmsg_cpp for file /home/yuri/WorkSpace/ROS/arm/srv/PS_2.srv */
#ifndef ARM_SERVICE_PS_2_H
#define ARM_SERVICE_PS_2_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace arm
{
template <class ContainerAllocator>
struct PS_2Request_ {
  typedef PS_2Request_<ContainerAllocator> Type;

  PS_2Request_()
  : A(0)
  , B(0)
  , C(0)
  {
  }

  PS_2Request_(const ContainerAllocator& _alloc)
  : A(0)
  , B(0)
  , C(0)
  {
  }

  typedef int32_t _A_type;
  int32_t A;

  typedef int32_t _B_type;
  int32_t B;

  typedef int32_t _C_type;
  int32_t C;


  typedef boost::shared_ptr< ::arm::PS_2Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm::PS_2Request_<ContainerAllocator>  const> ConstPtr;
}; // struct PS_2Request
typedef  ::arm::PS_2Request_<std::allocator<void> > PS_2Request;

typedef boost::shared_ptr< ::arm::PS_2Request> PS_2RequestPtr;
typedef boost::shared_ptr< ::arm::PS_2Request const> PS_2RequestConstPtr;



template <class ContainerAllocator>
struct PS_2Response_ {
  typedef PS_2Response_<ContainerAllocator> Type;

  PS_2Response_()
  : SUM(0)
  {
  }

  PS_2Response_(const ContainerAllocator& _alloc)
  : SUM(0)
  {
  }

  typedef int32_t _SUM_type;
  int32_t SUM;


  typedef boost::shared_ptr< ::arm::PS_2Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm::PS_2Response_<ContainerAllocator>  const> ConstPtr;
}; // struct PS_2Response
typedef  ::arm::PS_2Response_<std::allocator<void> > PS_2Response;

typedef boost::shared_ptr< ::arm::PS_2Response> PS_2ResponsePtr;
typedef boost::shared_ptr< ::arm::PS_2Response const> PS_2ResponseConstPtr;


struct PS_2
{

typedef PS_2Request Request;
typedef PS_2Response Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PS_2
} // namespace arm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm::PS_2Request_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm::PS_2Request_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm::PS_2Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e7a68ce4e0b75a9719b4950a7069c9d4";
  }

  static const char* value(const  ::arm::PS_2Request_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe7a68ce4e0b75a97ULL;
  static const uint64_t static_value2 = 0x19b4950a7069c9d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm::PS_2Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm/PS_2Request";
  }

  static const char* value(const  ::arm::PS_2Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm::PS_2Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 A\n\
int32 B\n\
int32 C\n\
\n\
";
  }

  static const char* value(const  ::arm::PS_2Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm::PS_2Request_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm::PS_2Response_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm::PS_2Response_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm::PS_2Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "51bb747045a4d027069f61c3993806a7";
  }

  static const char* value(const  ::arm::PS_2Response_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x51bb747045a4d027ULL;
  static const uint64_t static_value2 = 0x069f61c3993806a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm::PS_2Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm/PS_2Response";
  }

  static const char* value(const  ::arm::PS_2Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm::PS_2Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 SUM\n\
\n\
";
  }

  static const char* value(const  ::arm::PS_2Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm::PS_2Response_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm::PS_2Request_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.A);
    stream.next(m.B);
    stream.next(m.C);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct PS_2Request_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm::PS_2Response_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.SUM);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct PS_2Response_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<arm::PS_2> {
  static const char* value() 
  {
    return "64abfc7bce4665e399df2411641c82d3";
  }

  static const char* value(const arm::PS_2&) { return value(); } 
};

template<>
struct DataType<arm::PS_2> {
  static const char* value() 
  {
    return "arm/PS_2";
  }

  static const char* value(const arm::PS_2&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<arm::PS_2Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "64abfc7bce4665e399df2411641c82d3";
  }

  static const char* value(const arm::PS_2Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<arm::PS_2Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm/PS_2";
  }

  static const char* value(const arm::PS_2Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<arm::PS_2Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "64abfc7bce4665e399df2411641c82d3";
  }

  static const char* value(const arm::PS_2Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<arm::PS_2Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm/PS_2";
  }

  static const char* value(const arm::PS_2Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ARM_SERVICE_PS_2_H

