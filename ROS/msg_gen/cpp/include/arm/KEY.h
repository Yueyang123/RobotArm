/* Auto-generated by genmsg_cpp for file /home/yuri/WorkSpace/ROS/arm/msg/KEY.msg */
#ifndef ARM_MESSAGE_KEY_H
#define ARM_MESSAGE_KEY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace arm
{
template <class ContainerAllocator>
struct KEY_ {
  typedef KEY_<ContainerAllocator> Type;

  KEY_()
  : TH1(0.0)
  , TH2(0.0)
  , TH3(0.0)
  , TH4(0.0)
  , TH5(0.0)
  , TH6(0.0)
  {
  }

  KEY_(const ContainerAllocator& _alloc)
  : TH1(0.0)
  , TH2(0.0)
  , TH3(0.0)
  , TH4(0.0)
  , TH5(0.0)
  , TH6(0.0)
  {
  }

  typedef float _TH1_type;
  float TH1;

  typedef float _TH2_type;
  float TH2;

  typedef float _TH3_type;
  float TH3;

  typedef float _TH4_type;
  float TH4;

  typedef float _TH5_type;
  float TH5;

  typedef float _TH6_type;
  float TH6;


  typedef boost::shared_ptr< ::arm::KEY_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm::KEY_<ContainerAllocator>  const> ConstPtr;
}; // struct KEY
typedef  ::arm::KEY_<std::allocator<void> > KEY;

typedef boost::shared_ptr< ::arm::KEY> KEYPtr;
typedef boost::shared_ptr< ::arm::KEY const> KEYConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm::KEY_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm::KEY_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm::KEY_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm::KEY_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm::KEY_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ae0818592c8f0ca1320f402ba83ebe2f";
  }

  static const char* value(const  ::arm::KEY_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xae0818592c8f0ca1ULL;
  static const uint64_t static_value2 = 0x320f402ba83ebe2fULL;
};

template<class ContainerAllocator>
struct DataType< ::arm::KEY_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm/KEY";
  }

  static const char* value(const  ::arm::KEY_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm::KEY_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 TH1\n\
float32 TH2\n\
float32 TH3\n\
float32 TH4\n\
float32 TH5\n\
float32 TH6\n\
";
  }

  static const char* value(const  ::arm::KEY_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm::KEY_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm::KEY_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.TH1);
    stream.next(m.TH2);
    stream.next(m.TH3);
    stream.next(m.TH4);
    stream.next(m.TH5);
    stream.next(m.TH6);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct KEY_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm::KEY_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm::KEY_<ContainerAllocator> & v) 
  {
    s << indent << "TH1: ";
    Printer<float>::stream(s, indent + "  ", v.TH1);
    s << indent << "TH2: ";
    Printer<float>::stream(s, indent + "  ", v.TH2);
    s << indent << "TH3: ";
    Printer<float>::stream(s, indent + "  ", v.TH3);
    s << indent << "TH4: ";
    Printer<float>::stream(s, indent + "  ", v.TH4);
    s << indent << "TH5: ";
    Printer<float>::stream(s, indent + "  ", v.TH5);
    s << indent << "TH6: ";
    Printer<float>::stream(s, indent + "  ", v.TH6);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_MESSAGE_KEY_H

