/* Auto-generated by genmsg_cpp for file /home/yuri/WorkSpace/ROS/arm/msg/ZUOBIAO.msg */
#ifndef ARM_MESSAGE_ZUOBIAO_H
#define ARM_MESSAGE_ZUOBIAO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace arm
{
template <class ContainerAllocator>
struct ZUOBIAO_ {
  typedef ZUOBIAO_<ContainerAllocator> Type;

  ZUOBIAO_()
  : X(0.0)
  , Y(0.0)
  , Z(0.0)
  {
  }

  ZUOBIAO_(const ContainerAllocator& _alloc)
  : X(0.0)
  , Y(0.0)
  , Z(0.0)
  {
  }

  typedef float _X_type;
  float X;

  typedef float _Y_type;
  float Y;

  typedef float _Z_type;
  float Z;


  typedef boost::shared_ptr< ::arm::ZUOBIAO_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm::ZUOBIAO_<ContainerAllocator>  const> ConstPtr;
}; // struct ZUOBIAO
typedef  ::arm::ZUOBIAO_<std::allocator<void> > ZUOBIAO;

typedef boost::shared_ptr< ::arm::ZUOBIAO> ZUOBIAOPtr;
typedef boost::shared_ptr< ::arm::ZUOBIAO const> ZUOBIAOConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm::ZUOBIAO_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm::ZUOBIAO_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm::ZUOBIAO_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm::ZUOBIAO_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm::ZUOBIAO_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a1dfb8f61d81d8e9fe291bc0d86a2f48";
  }

  static const char* value(const  ::arm::ZUOBIAO_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa1dfb8f61d81d8e9ULL;
  static const uint64_t static_value2 = 0xfe291bc0d86a2f48ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm::ZUOBIAO_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm/ZUOBIAO";
  }

  static const char* value(const  ::arm::ZUOBIAO_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm::ZUOBIAO_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 X\n\
float32 Y\n\
float32 Z\n\
";
  }

  static const char* value(const  ::arm::ZUOBIAO_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm::ZUOBIAO_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm::ZUOBIAO_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.X);
    stream.next(m.Y);
    stream.next(m.Z);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ZUOBIAO_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm::ZUOBIAO_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm::ZUOBIAO_<ContainerAllocator> & v) 
  {
    s << indent << "X: ";
    Printer<float>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<float>::stream(s, indent + "  ", v.Y);
    s << indent << "Z: ";
    Printer<float>::stream(s, indent + "  ", v.Z);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_MESSAGE_ZUOBIAO_H

